// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project 6d1ac80c6e7bce05 "Projeto Chacal", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
 * font?: undefined // Font
 * delay?: number // Delay
 * animationDuration?: number // Animation Duration
 * loop?: boolean // Loop
 * delayBetweenLoops?: number // Delay Between Loops
 * repeatTime?: number // Repeat Time
 * topRowOffset?: number // Top Row Offset
 * middleRowOffset?: number // Middle Row Offset
 * bottomRowOffset?: number // Bottom Row Offset
 * textColor?: string // Text Color
 * textContent?: string // Text Content
 * transitionDirection?: 'Top to Bottom' | 'Bottom to Top' // Transition Direction
}} Props

 */
import { routes } from "./chunks/chunk-XLH7UDAO.js";

// virtual:text-chr-reveal
import { Fragment } from "react";
import { ContextProviders } from "unframer";

// /:https://framerusercontent.com/modules/9CUESObdUz2pwbQFoffG/sr8tBwV31s4cP295bKBq/Text_Chr_Reveal.js
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import {
	addPropertyControls,
	ControlType,
	motion,
	RenderTarget,
} from "unframer";
import { useRef, useEffect, useState, memo, useMemo } from "react";
import { useInView } from "unframer";
var CharacterRow = /* @__PURE__ */ memo(
	({
		characters,
		yOffset,
		top,
		color,
		textStyle,
		keyPrefix,
		isInView,
		duration,
		isLooping,
		repeat,
		direction,
		delay,
	}) => {
		const initialY = direction === "top-to-bottom" ? -yOffset : yOffset;
		const targetY = direction === "top-to-bottom" ? 0 : 0;
		return (
			<div
				style={{
					position: top === true ? "relative" : "absolute",
					top: top === true ? void 0 : `${top}%`,
					left: top === true ? void 0 : "50%",
					transform: top === true ? void 0 : "translate(-50%, -50%)",
					display: "flex",
					justifyContent: "center",
					textTransform: "uppercase",
					color,
					willChange: "transform",
					...textStyle,
				}}
			>
				{characters.map((char, index) => (
					<motion.span
						initial={{
							y: initialY,
						}}
						animate={{
							y: isInView ? targetY : initialY,
						}}
						transition={{
							type: "tween",
							ease: [0.2, 0.8, 0, 1],
							duration,
							delay: delay + index * 0.06,
							repeat: isLooping ? repeat : 0,
							repeatType: "reverse",
						}}
						style={{
							position: "relative",
							display: "inline-block",
							willChange: "transform",
						}}
					>
						{char}
					</motion.span>
				))}
			</div>
		);
	},
);
CharacterRow.displayName = "CharacterRow";
function Text_Chr_Reveal({
	text = "SELECTED",
	textStyle = {
		fontSize: 26,
		lineHeight: "1",
	},
	color = "#ECEBEB",
	yOffset1 = 290,
	yOffset2 = 290,
	yOffset3 = 300,
	duration = 2.5,
	loopDelay = 1,
	isLooping = false,
	repeat = 0,
	direction = "top-to-bottom",
	delay = 0,
}) {
	const ref = useRef(null);
	const isInView = useInView(ref, {
		once: !isLooping,
	});
	const [key, setKey] = useState(0);
	const characters = useMemo(() => text.split(""), [text]);
	useEffect(() => {
		if (isInView && isLooping) {
			const interval = setInterval(
				() => {
					setKey((prev) => prev + 1);
				},
				(duration + loopDelay) * 1e3,
			);
			return () => clearInterval(interval);
		}
	}, [isInView, duration, loopDelay, isLooping]);
	if (RenderTarget.current() === "CANVAS") {
		return (
			<div
				style={{
					display: "flex",
					justifyContent: "center",
					textTransform: "uppercase",
					color,
					willChange: "transform",
					...textStyle,
				}}
			>
				{characters.map((char, index) => (
					<motion.span
						style={{
							position: "relative",
							display: "inline-block",
						}}
					>
						{char}
					</motion.span>
				))}
			</div>
		);
	}
	return (
		<div
			ref={ref}
			style={{
				display: "flex",
				flexDirection: "column",
				width: "100%",
				height: "auto",
				justifyContent: "center",
				overflow: "hidden",
				position: "relative",
			}}
		>
			<CharacterRow
				characters={characters}
				yOffset={yOffset1}
				top={true}
				color={color}
				textStyle={textStyle}
				keyPrefix={`${key}-top`}
				isInView={isInView}
				duration={duration}
				isLooping={isLooping}
				repeat={repeat}
				direction={direction}
				delay={delay}
			/>
			<CharacterRow
				characters={characters}
				yOffset={yOffset2}
				top={180}
				color={color}
				textStyle={textStyle}
				keyPrefix={`${key}-middle`}
				isInView={isInView}
				duration={duration}
				isLooping={isLooping}
				repeat={repeat}
				direction={direction}
				delay={delay}
			/>
			<CharacterRow
				characters={characters}
				yOffset={yOffset3}
				top={250}
				color={color}
				textStyle={textStyle}
				keyPrefix={`${key}-bottom`}
				isInView={isInView}
				duration={duration}
				isLooping={isLooping}
				repeat={repeat}
				direction={direction}
				delay={delay}
			/>
		</div>
	);
}
addPropertyControls(Text_Chr_Reveal, {
	textStyle: {
		type: "font",
		title: "Font",
		controls: "extended",
		defaultValue: {
			fontSize: 26,
			lineHeight: "1",
		},
	},
	delay: {
		type: ControlType.Number,
		defaultValue: 0,
		title: "Delay",
	},
	duration: {
		type: ControlType.Number,
		defaultValue: 2.5,
		title: "Animation Duration",
	},
	isLooping: {
		type: ControlType.Boolean,
		defaultValue: false,
		title: "Loop",
	},
	loopDelay: {
		type: ControlType.Number,
		defaultValue: 1,
		title: "Delay Between Loops",
	},
	repeat: {
		type: ControlType.Number,
		defaultValue: 0,
		title: "Repeat Time",
	},
	yOffset1: {
		type: ControlType.Number,
		defaultValue: 290,
		title: "Top Row Offset",
	},
	yOffset2: {
		type: ControlType.Number,
		defaultValue: 290,
		title: "Middle Row Offset",
	},
	yOffset3: {
		type: ControlType.Number,
		defaultValue: 300,
		title: "Bottom Row Offset",
	},
	color: {
		type: ControlType.Color,
		defaultValue: "#ECEBEB",
		title: "Text Color",
	},
	text: {
		type: ControlType.String,
		title: "Text Content",
	},
	direction: {
		type: ControlType.Enum,
		defaultValue: "top-to-bottom",
		title: "Transition Direction",
		options: ["top-to-bottom", "bottom-to-top"],
		optionTitles: ["Top to Bottom", "Bottom to Top"],
	},
});

// virtual:text-chr-reveal
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"6d1ac80c6e7bce05cf1e83998b9524564a80e103f40bc586c8c0153e682ec4cd"
			}
			locale={locale}
			locales={locales}
		>
			<Text_Chr_Reveal {...rest} />
		</ContextProviders>
	);
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders TextChrRevealFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"6d1ac80c6e7bce05cf1e83998b9524564a80e103f40bc586c8c0153e682ec4cd"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={Text_Chr_Reveal}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, Text_Chr_Reveal);
var text_chr_reveal_default = ComponentWithRoot;
export { text_chr_reveal_default as default };
