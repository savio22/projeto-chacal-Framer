// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project 6d1ac80c6e7bce05 "Projeto Chacal", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
 * variant?: 'Default' | 'OnScroll' | 'Tablet' | 'Tablet OnScroll' | 'Mobile' | 'Mobile OnScroll' // Variant
}} Props

 */
import { routes } from "./chunks/chunk-XLH7UDAO.js";

// virtual:headline-on-scroll
import { Fragment as Fragment2 } from "react";
import { ContextProviders } from "unframer";

// /:https://framerusercontent.com/modules/qIpUmoDJc981RmIVU8MO/LcXd2mSXSYRSlWBNAeRg/z8naFCbse.js
import { jsx as _jsx2, jsxs as _jsxs2 } from "react/jsx-runtime";
import {
	addFonts,
	addPropertyControls as addPropertyControls2,
	ComponentViewportProvider,
	ControlType as ControlType2,
	cx,
	getFonts,
	useComponentViewport,
	useLocaleInfo,
	useVariantState,
	withCSS,
	withFX,
} from "unframer";
import { LayoutGroup, motion as motion2, MotionConfigContext } from "unframer";
import * as React from "react";

// /:https://framerusercontent.com/modules/C0PcnggUCss6Q2JzB6GF/SDu1j9WwCdY2rKtz4jwc/Text_OnScroll.js
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useEffect, useRef } from "react";
import { motion, useAnimation, useScroll, useTransform } from "unframer";
import { addPropertyControls, ControlType } from "unframer";
function TextOnScroll({
	text,
	color01,
	color02,
	Duration,
	delay,
	replays,
	scrollTriggerOffset = 0,
	textStyle,
}) {
	const controls = useAnimation();
	const textRef = useRef();
	const containerRef = useRef();
	const { scrollYProgress } = useScroll({
		target: textRef,
		offset: [`${-scrollTriggerOffset} 1`, `${scrollTriggerOffset} 0.65`],
	});
	const width = useTransform(scrollYProgress, [0, 1], ["0%", "100%"]);
	useEffect(() => {
		const observer = new IntersectionObserver(async ([entry]) => {
			if (entry.isIntersecting) {
				await new Promise((resolve) => setTimeout(resolve, delay * 1e3));
				controls.start("visible");
			} else if (!entry.isIntersecting && replays) {
				controls.start("hidden");
			}
		});
		observer.observe(textRef.current);
		return () => observer.disconnect();
	}, [Duration, controls, delay, replays]);
	return (
		<div
			ref={containerRef}
			style={{
				...textStyle,
				width: "100%",
				whiteSpace: "nowrap",
				color: color01,
				overflow: "hidden",
			}}
		>
			<div ref={textRef}>
				<span
					style={{
						position: "relative",
						display: "inline-block",
					}}
				>
					{text}
					<motion.span
						style={{
							position: "absolute",
							overflow: "hidden",
							whiteSpace: "nowrap",
							color: color02,
							top: 0,
							left: 0,
							width,
						}}
						transition={{
							duration: Duration,
						}}
					>
						{text}
					</motion.span>
				</span>
			</div>
		</div>
	);
}
addPropertyControls(TextOnScroll, {
	text: {
		type: ControlType.String,
		defaultValue: "Hello, World!",
		displayTextArea: true,
	},
	textStyle: {
		type: "font",
		title: "Font",
		controls: "extended",
		defaultValue: {
			fontSize: 16,
			lineHeight: "1.1",
		},
	},
	color01: {
		title: "Color 01",
		type: ControlType.Color,
		defaultValue: "#333",
	},
	color02: {
		title: "Color 02",
		type: ControlType.Color,
		defaultValue: "#fff",
	},
	Duration: {
		type: ControlType.Number,
		defaultValue: 1,
		min: 0.1,
		max: 10,
		step: 0.1,
	},
	delay: {
		title: "Delay",
		type: ControlType.Number,
		defaultValue: 0,
		min: 0,
		max: 10,
		step: 0.1,
	},
	replays: {
		title: "Replays",
		type: ControlType.Boolean,
		defaultValue: true,
	},
	scrollTriggerOffset: {
		title: "Scroll Trigger Offset",
		type: ControlType.Number,
		defaultValue: 0.5,
		min: 0,
		max: 1,
		step: 0.1,
	},
});

// /:https://framerusercontent.com/modules/qIpUmoDJc981RmIVU8MO/LcXd2mSXSYRSlWBNAeRg/z8naFCbse.js
var TextOnScrollFonts = getFonts(TextOnScroll);
var MotionDivWithFX = withFX(motion2.div);
var cycleOrder = [
	"J9RY61z2t",
	"T2ZRZqe47",
	"pNMAbIpJR",
	"tpHpyZH_O",
	"xFoxOUjCm",
	"GNcBomxgJ",
];
var serializationHash = "framer-iCcTm";
var variantClassNames = {
	GNcBomxgJ: "framer-v-1wtmk8r",
	J9RY61z2t: "framer-v-16gyp0j",
	pNMAbIpJR: "framer-v-z490rh",
	T2ZRZqe47: "framer-v-1d47ygo",
	tpHpyZH_O: "framer-v-qiq0l2",
	xFoxOUjCm: "framer-v-1tjhs4g",
};
function addPropertyOverrides(overrides, ...variants) {
	const nextOverrides = {};
	variants?.forEach(
		(variant) => variant && Object.assign(nextOverrides, overrides[variant]),
	);
	return nextOverrides;
}
var transition1 = {
	bounce: 0,
	delay: 0,
	duration: 1.5,
	type: "spring",
};
var transition2 = {
	delay: 0,
	duration: 1.5,
	ease: [0.8, 0.2, 0, 1],
	type: "tween",
};
var animation = {
	opacity: 0,
	rotate: 0,
	rotateX: 0,
	rotateY: 0,
	scale: 1,
	skewX: 0,
	skewY: 0,
	x: 0,
	y: 35,
};
var transition3 = {
	delay: 0,
	duration: 0.5,
	ease: [0.8, 0.2, 0, 1],
	type: "tween",
};
var animation1 = {
	opacity: 0,
	rotate: 0,
	rotateX: 0,
	rotateY: 0,
	scale: 1,
	skewX: 0,
	skewY: 0,
	transition: transition3,
	x: 0,
	y: 35,
};
var Transition = ({ value, children }) => {
	const config = React.useContext(MotionConfigContext);
	const transition = value ?? config.transition;
	const contextValue = React.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext.Provider value={contextValue}>
			{children}
		</MotionConfigContext.Provider>
	);
};
var Variants = motion2.create(React.Fragment);
var humanReadableVariantMap = {
	"Mobile OnScroll": "GNcBomxgJ",
	"Tablet OnScroll": "tpHpyZH_O",
	Default: "J9RY61z2t",
	Mobile: "xFoxOUjCm",
	OnScroll: "T2ZRZqe47",
	Tablet: "pNMAbIpJR",
};
var getProps = ({ height, id, width, ...props }) => {
	return {
		...props,
		variant:
			humanReadableVariantMap[props.variant] ?? props.variant ?? "J9RY61z2t",
	};
};
var createLayoutDependency = (props, variants) => {
	if (props.layoutDependency)
		return variants.join("-") + props.layoutDependency;
	return variants.join("-");
};
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
	const { activeLocale, setLocale } = useLocaleInfo();
	const { style, className, layoutId, variant, ...restProps } = getProps(props);
	const {
		baseVariant,
		classNames,
		clearLoadingGesture,
		gestureHandlers,
		gestureVariant,
		isLoading,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState({
		cycleOrder,
		defaultVariant: "J9RY61z2t",
		variant,
		variantClassNames,
	});
	const layoutDependency = createLayoutDependency(props, variants);
	const sharedStyleClassNames = [];
	const scopingClassNames = cx(serializationHash, ...sharedStyleClassNames);
	const ref1 = React.useRef(null);
	const defaultLayoutId = React.useId();
	const componentViewport = useComponentViewport();
	return (
		<LayoutGroup id={layoutId ?? defaultLayoutId}>
			<Variants animate={variants} initial={false}>
				<Transition
					value={transition1}
					{...addPropertyOverrides(
						{
							T2ZRZqe47: {
								value: transition2,
							},
						},
						baseVariant,
						gestureVariant,
					)}
				>
					<motion2.div
						{...restProps}
						{...gestureHandlers}
						className={cx(
							scopingClassNames,
							"framer-16gyp0j",
							className,
							classNames,
						)}
						data-framer-name={"Default"}
						layoutDependency={layoutDependency}
						layoutId={"J9RY61z2t"}
						ref={ref ?? ref1}
						style={{
							...style,
						}}
						{...addPropertyOverrides(
							{
								GNcBomxgJ: {
									"data-framer-name": "Mobile OnScroll",
								},
								pNMAbIpJR: {
									"data-framer-name": "Tablet",
								},
								T2ZRZqe47: {
									"data-framer-name": "OnScroll",
								},
								tpHpyZH_O: {
									"data-framer-name": "Tablet OnScroll",
								},
								xFoxOUjCm: {
									"data-framer-name": "Mobile",
								},
							},
							baseVariant,
							gestureVariant,
						)}
					>
						<motion2.div
							className={"framer-14ely3g"}
							data-framer-name={"Text Split"}
							layoutDependency={layoutDependency}
							layoutId={"Z61EbQa8c"}
						>
							<ComponentViewportProvider>
								<MotionDivWithFX
									__framer__animate={{
										transition: transition3,
									}}
									__framer__animateOnce={true}
									__framer__enter={animation}
									__framer__exit={animation1}
									__framer__styleAppearEffectEnabled={true}
									__framer__threshold={0}
									__perspectiveFX={false}
									__smartComponentFX={true}
									__targetOpacity={1}
									className={"framer-1prfuv4-container"}
									layoutDependency={layoutDependency}
									layoutId={"fmaCFXsuR-container"}
									{...addPropertyOverrides(
										{
											T2ZRZqe47: {
												__framer__styleAppearEffectEnabled: void 0,
											},
										},
										baseVariant,
										gestureVariant,
									)}
								>
									<TextOnScroll
										color01={
											"var(--token-a94f824d-9740-42c5-b0f6-0397fd7c5912, rgb(158, 158, 158))"
										}
										color02={
											"var(--token-7ab5faa8-d17b-41d2-8b42-49368cf2f4df, rgb(34, 39, 37))"
										}
										delay={0}
										Duration={1.5}
										height={"100%"}
										id={"fmaCFXsuR"}
										layoutId={"fmaCFXsuR"}
										replays={true}
										scrollTriggerOffset={0.8}
										style={{
											width: "100%",
										}}
										text={"BOOST"}
										textStyle={{
											fontFamily:
												'"Manrope", "Manrope Placeholder", sans-serif',
											fontSize: "148px",
											fontStyle: "normal",
											fontWeight: 600,
											letterSpacing: "-0.03em",
											lineHeight: "0.8em",
											textAlign: "center",
										}}
										width={"100%"}
										{...addPropertyOverrides(
											{
												GNcBomxgJ: {
													textStyle: {
														fontFamily:
															'"Manrope", "Manrope Placeholder", sans-serif',
														fontSize: "60px",
														fontStyle: "normal",
														fontWeight: 600,
														letterSpacing: "-0.03em",
														lineHeight: "0.8em",
														textAlign: "center",
													},
												},
												pNMAbIpJR: {
													textStyle: {
														fontFamily:
															'"Manrope", "Manrope Placeholder", sans-serif',
														fontSize: "99px",
														fontStyle: "normal",
														fontWeight: 600,
														letterSpacing: "-0.03em",
														lineHeight: "0.8em",
														textAlign: "center",
													},
												},
												tpHpyZH_O: {
													textStyle: {
														fontFamily:
															'"Manrope", "Manrope Placeholder", sans-serif',
														fontSize: "99px",
														fontStyle: "normal",
														fontWeight: 600,
														letterSpacing: "-0.03em",
														lineHeight: "0.8em",
														textAlign: "center",
													},
												},
												xFoxOUjCm: {
													textStyle: {
														fontFamily:
															'"Manrope", "Manrope Placeholder", sans-serif',
														fontSize: "60px",
														fontStyle: "normal",
														fontWeight: 600,
														letterSpacing: "-0.03em",
														lineHeight: "0.8em",
														textAlign: "center",
													},
												},
											},
											baseVariant,
											gestureVariant,
										)}
									/>
								</MotionDivWithFX>
							</ComponentViewportProvider>
							<ComponentViewportProvider>
								<motion2.div
									className={"framer-swmanp-container"}
									layoutDependency={layoutDependency}
									layoutId={"bm9wY2P62-container"}
								>
									<TextOnScroll
										color01={
											"var(--token-a94f824d-9740-42c5-b0f6-0397fd7c5912, rgb(158, 158, 158))"
										}
										color02={
											"var(--token-7ab5faa8-d17b-41d2-8b42-49368cf2f4df, rgb(34, 39, 37))"
										}
										delay={0}
										Duration={1.5}
										height={"100%"}
										id={"bm9wY2P62"}
										layoutId={"bm9wY2P62"}
										replays={true}
										scrollTriggerOffset={0.8}
										style={{
											width: "100%",
										}}
										text={"IMPACT"}
										textStyle={{
											fontFamily:
												'"Manrope", "Manrope Placeholder", sans-serif',
											fontSize: "148px",
											fontStyle: "normal",
											fontWeight: 600,
											letterSpacing: "-0.03em",
											lineHeight: "0.8em",
											textAlign: "center",
										}}
										width={"100%"}
										{...addPropertyOverrides(
											{
												GNcBomxgJ: {
													textStyle: {
														fontFamily:
															'"Manrope", "Manrope Placeholder", sans-serif',
														fontSize: "60px",
														fontStyle: "normal",
														fontWeight: 600,
														letterSpacing: "-0.03em",
														lineHeight: "0.8em",
														textAlign: "center",
													},
												},
												pNMAbIpJR: {
													textStyle: {
														fontFamily:
															'"Manrope", "Manrope Placeholder", sans-serif',
														fontSize: "99px",
														fontStyle: "normal",
														fontWeight: 600,
														letterSpacing: "-0.03em",
														lineHeight: "0.8em",
														textAlign: "center",
													},
												},
												tpHpyZH_O: {
													textStyle: {
														fontFamily:
															'"Manrope", "Manrope Placeholder", sans-serif',
														fontSize: "99px",
														fontStyle: "normal",
														fontWeight: 600,
														letterSpacing: "-0.03em",
														lineHeight: "0.8em",
														textAlign: "center",
													},
												},
												xFoxOUjCm: {
													textStyle: {
														fontFamily:
															'"Manrope", "Manrope Placeholder", sans-serif',
														fontSize: "60px",
														fontStyle: "normal",
														fontWeight: 600,
														letterSpacing: "-0.03em",
														lineHeight: "0.8em",
														textAlign: "center",
													},
												},
											},
											baseVariant,
											gestureVariant,
										)}
									/>
								</motion2.div>
							</ComponentViewportProvider>
						</motion2.div>
						<motion2.div
							className={"framer-vbw3kr"}
							data-framer-name={"Text Split"}
							layoutDependency={layoutDependency}
							layoutId={"AigoLQQyV"}
						>
							<ComponentViewportProvider>
								<MotionDivWithFX
									__framer__animate={{
										transition: transition3,
									}}
									__framer__animateOnce={true}
									__framer__enter={animation}
									__framer__exit={animation1}
									__framer__styleAppearEffectEnabled={true}
									__framer__threshold={0}
									__perspectiveFX={false}
									__smartComponentFX={true}
									__targetOpacity={1}
									className={"framer-rwkwwz-container"}
									layoutDependency={layoutDependency}
									layoutId={"sBOOJFqUM-container"}
									{...addPropertyOverrides(
										{
											T2ZRZqe47: {
												__framer__styleAppearEffectEnabled: void 0,
											},
										},
										baseVariant,
										gestureVariant,
									)}
								>
									<TextOnScroll
										color01={
											"var(--token-a94f824d-9740-42c5-b0f6-0397fd7c5912, rgb(158, 158, 158))"
										}
										color02={
											"var(--token-7ab5faa8-d17b-41d2-8b42-49368cf2f4df, rgb(34, 39, 37))"
										}
										delay={0}
										Duration={1.5}
										height={"100%"}
										id={"sBOOJFqUM"}
										layoutId={"sBOOJFqUM"}
										replays={true}
										scrollTriggerOffset={0.8}
										style={{
											width: "100%",
										}}
										text={"DRIVE"}
										textStyle={{
											fontFamily:
												'"Manrope", "Manrope Placeholder", sans-serif',
											fontSize: "148px",
											fontStyle: "normal",
											fontWeight: 600,
											letterSpacing: "-0.03em",
											lineHeight: "0.8em",
											textAlign: "center",
										}}
										width={"100%"}
										{...addPropertyOverrides(
											{
												GNcBomxgJ: {
													textStyle: {
														fontFamily:
															'"Manrope", "Manrope Placeholder", sans-serif',
														fontSize: "60px",
														fontStyle: "normal",
														fontWeight: 600,
														letterSpacing: "-0.03em",
														lineHeight: "0.8em",
														textAlign: "center",
													},
												},
												pNMAbIpJR: {
													textStyle: {
														fontFamily:
															'"Manrope", "Manrope Placeholder", sans-serif',
														fontSize: "99px",
														fontStyle: "normal",
														fontWeight: 600,
														letterSpacing: "-0.03em",
														lineHeight: "0.8em",
														textAlign: "center",
													},
												},
												tpHpyZH_O: {
													textStyle: {
														fontFamily:
															'"Manrope", "Manrope Placeholder", sans-serif',
														fontSize: "99px",
														fontStyle: "normal",
														fontWeight: 600,
														letterSpacing: "-0.03em",
														lineHeight: "0.8em",
														textAlign: "center",
													},
												},
												xFoxOUjCm: {
													textStyle: {
														fontFamily:
															'"Manrope", "Manrope Placeholder", sans-serif',
														fontSize: "60px",
														fontStyle: "normal",
														fontWeight: 600,
														letterSpacing: "-0.03em",
														lineHeight: "0.8em",
														textAlign: "center",
													},
												},
											},
											baseVariant,
											gestureVariant,
										)}
									/>
								</MotionDivWithFX>
							</ComponentViewportProvider>
							<ComponentViewportProvider>
								<motion2.div
									className={"framer-1ce7um8-container"}
									layoutDependency={layoutDependency}
									layoutId={"TYHOSff7T-container"}
								>
									<TextOnScroll
										color01={
											"var(--token-a94f824d-9740-42c5-b0f6-0397fd7c5912, rgb(158, 158, 158))"
										}
										color02={
											"var(--token-7ab5faa8-d17b-41d2-8b42-49368cf2f4df, rgb(34, 39, 37))"
										}
										delay={0}
										Duration={1.5}
										height={"100%"}
										id={"TYHOSff7T"}
										layoutId={"TYHOSff7T"}
										replays={true}
										scrollTriggerOffset={0.8}
										style={{
											width: "100%",
										}}
										text={"RESULTS"}
										textStyle={{
											fontFamily:
												'"Manrope", "Manrope Placeholder", sans-serif',
											fontSize: "148px",
											fontStyle: "normal",
											fontWeight: 600,
											letterSpacing: "-0.03em",
											lineHeight: "0.8em",
											textAlign: "center",
										}}
										width={"100%"}
										{...addPropertyOverrides(
											{
												GNcBomxgJ: {
													textStyle: {
														fontFamily:
															'"Manrope", "Manrope Placeholder", sans-serif',
														fontSize: "60px",
														fontStyle: "normal",
														fontWeight: 600,
														letterSpacing: "-0.03em",
														lineHeight: "0.8em",
														textAlign: "center",
													},
												},
												pNMAbIpJR: {
													textStyle: {
														fontFamily:
															'"Manrope", "Manrope Placeholder", sans-serif',
														fontSize: "99px",
														fontStyle: "normal",
														fontWeight: 600,
														letterSpacing: "-0.03em",
														lineHeight: "0.8em",
														textAlign: "center",
													},
												},
												tpHpyZH_O: {
													textStyle: {
														fontFamily:
															'"Manrope", "Manrope Placeholder", sans-serif',
														fontSize: "99px",
														fontStyle: "normal",
														fontWeight: 600,
														letterSpacing: "-0.03em",
														lineHeight: "0.8em",
														textAlign: "center",
													},
												},
												xFoxOUjCm: {
													textStyle: {
														fontFamily:
															'"Manrope", "Manrope Placeholder", sans-serif',
														fontSize: "60px",
														fontStyle: "normal",
														fontWeight: 600,
														letterSpacing: "-0.03em",
														lineHeight: "0.8em",
														textAlign: "center",
													},
												},
											},
											baseVariant,
											gestureVariant,
										)}
									/>
								</motion2.div>
							</ComponentViewportProvider>
						</motion2.div>
					</motion2.div>
				</Transition>
			</Variants>
		</LayoutGroup>
	);
});
var css = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-iCcTm.framer-1jz834r, .framer-iCcTm .framer-1jz834r { display: block; }",
	".framer-iCcTm.framer-16gyp0j { align-content: center; align-items: center; display: flex; flex-direction: column; flex-wrap: wrap; gap: 0px; height: min-content; justify-content: flex-start; overflow: visible; padding: 0px; position: relative; width: 1200px; }",
	".framer-iCcTm .framer-14ely3g, .framer-iCcTm .framer-vbw3kr { align-content: center; align-items: center; display: flex; flex: none; flex-direction: column; flex-wrap: nowrap; gap: 0px; height: 118px; justify-content: flex-start; overflow: hidden; padding: 0px; position: relative; width: 100%; }",
	".framer-iCcTm .framer-1prfuv4-container, .framer-iCcTm .framer-swmanp-container, .framer-iCcTm .framer-rwkwwz-container, .framer-iCcTm .framer-1ce7um8-container { flex: none; height: auto; position: relative; width: 100%; }",
	"@supports (background: -webkit-named-image(i)) and (not (font-palette:dark)) { .framer-iCcTm.framer-16gyp0j, .framer-iCcTm .framer-14ely3g, .framer-iCcTm .framer-vbw3kr { gap: 0px; } .framer-iCcTm.framer-16gyp0j > *, .framer-iCcTm .framer-14ely3g > *, .framer-iCcTm .framer-vbw3kr > * { margin: 0px; margin-bottom: calc(0px / 2); margin-top: calc(0px / 2); } .framer-iCcTm.framer-16gyp0j > :first-child, .framer-iCcTm .framer-14ely3g > :first-child, .framer-iCcTm .framer-vbw3kr > :first-child { margin-top: 0px; } .framer-iCcTm.framer-16gyp0j > :last-child, .framer-iCcTm .framer-14ely3g > :last-child, .framer-iCcTm .framer-vbw3kr > :last-child { margin-bottom: 0px; } }",
	".framer-iCcTm.framer-v-1d47ygo .framer-14ely3g, .framer-iCcTm.framer-v-1d47ygo .framer-vbw3kr { justify-content: flex-end; }",
	".framer-iCcTm.framer-v-z490rh .framer-14ely3g, .framer-iCcTm.framer-v-z490rh .framer-vbw3kr { height: 79px; }",
	".framer-iCcTm.framer-v-qiq0l2 .framer-14ely3g, .framer-iCcTm.framer-v-qiq0l2 .framer-vbw3kr { height: 79px; justify-content: flex-end; }",
	".framer-iCcTm.framer-v-1tjhs4g .framer-14ely3g, .framer-iCcTm.framer-v-1tjhs4g .framer-vbw3kr { height: 48px; }",
	".framer-iCcTm.framer-v-1wtmk8r .framer-14ely3g, .framer-iCcTm.framer-v-1wtmk8r .framer-vbw3kr { height: 48px; justify-content: flex-end; }",
];
var Framerz8naFCbse = withCSS(Component, css, "framer-iCcTm");
var stdin_default = Framerz8naFCbse;
Framerz8naFCbse.displayName = "Headline OnScroll";
Framerz8naFCbse.defaultProps = {
	height: 236,
	width: 1200,
};
addPropertyControls2(Framerz8naFCbse, {
	variant: {
		options: [
			"J9RY61z2t",
			"T2ZRZqe47",
			"pNMAbIpJR",
			"tpHpyZH_O",
			"xFoxOUjCm",
			"GNcBomxgJ",
		],
		optionTitles: [
			"Default",
			"OnScroll",
			"Tablet",
			"Tablet OnScroll",
			"Mobile",
			"Mobile OnScroll",
		],
		title: "Variant",
		type: ControlType2.Enum,
	},
});
addFonts(
	Framerz8naFCbse,
	[
		{
			explicitInter: true,
			fonts: [
				{
					family: "Manrope",
					source: "fontshare",
					style: "normal",
					url: "https://framerusercontent.com/third-party-assets/fontshare/wf/6U2SGH566NSNERG6RGEV3DSNEK7DL2RF/JRDYRKMSAW2H35IWEQIPL67HAJQ35MG5/JNU3GNMUBPWW6V6JTED3S27XL5HN7NM5.woff2",
					weight: "600",
				},
			],
		},
		...TextOnScrollFonts,
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// virtual:headline-on-scroll
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {
	base: "xFoxOUjCm",
	md: "pNMAbIpJR",
	xl: "J9RY61z2t",
};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"6d1ac80c6e7bce05cf1e83998b9524564a80e103f40bc586c8c0153e682ec4cd"
			}
			locale={locale}
			locales={locales}
		>
			{jsx(stdin_default, {
				...rest,
			})}
		</ContextProviders>
	);
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders HeadlineOnScrollFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"6d1ac80c6e7bce05cf1e83998b9524564a80e103f40bc586c8c0153e682ec4cd"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={stdin_default}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, stdin_default);
var headline_on_scroll_default = ComponentWithRoot;
export { headline_on_scroll_default as default };
