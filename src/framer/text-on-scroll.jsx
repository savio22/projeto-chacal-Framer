// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project 6d1ac80c6e7bce05 "Projeto Chacal", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
 * text?: string // text
 * font?: undefined // Font
 * color01?: string // Color 01
 * color02?: string // Color 02
 * duration?: number // duration
 * delay?: number // Delay
 * replays?: boolean // Replays
 * scrollTriggerOffset?: number // Scroll Trigger Offset
}} Props

 */
import { routes } from "./chunks/chunk-XLH7UDAO.js";

// virtual:text-on-scroll
import { Fragment } from "react";
import { ContextProviders } from "unframer";

// /:https://framerusercontent.com/modules/Ad8OfOeVIBoJ6Vg0PAjM/BiyFIuI2vYa1dWDtZCGd/Text_OnScroll.js
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useEffect, useRef } from "react";
import { motion, useAnimation, useScroll, useTransform } from "unframer";
import { addPropertyControls, ControlType } from "unframer";
function TextOnScroll({
	text,
	color01,
	color02,
	Duration,
	delay,
	replays,
	scrollTriggerOffset = 0,
	textStyle,
}) {
	const controls = useAnimation();
	const textRef = useRef();
	const containerRef = useRef();
	const { scrollYProgress } = useScroll({
		target: textRef,
		offset: [`${-scrollTriggerOffset} 1`, `${scrollTriggerOffset} 0.65`],
	});
	const width = useTransform(scrollYProgress, [0, 1], ["0%", "100%"]);
	useEffect(() => {
		const observer = new IntersectionObserver(async ([entry]) => {
			if (entry.isIntersecting) {
				await new Promise((resolve) => setTimeout(resolve, delay * 1e3));
				controls.start("visible");
			} else if (!entry.isIntersecting && replays) {
				controls.start("hidden");
			}
		});
		observer.observe(textRef.current);
		return () => observer.disconnect();
	}, [Duration, controls, delay, replays]);
	return (
		<div
			ref={containerRef}
			style={{
				...textStyle,
				width: "100%",
				whiteSpace: "nowrap",
				color: color01,
				overflow: "hidden",
			}}
		>
			<div ref={textRef}>
				<span
					style={{
						position: "relative",
						display: "inline-block",
					}}
				>
					{text}
					<motion.span
						style={{
							position: "absolute",
							overflow: "hidden",
							whiteSpace: "nowrap",
							color: color02,
							top: 0,
							left: 0,
							width,
						}}
						transition={{
							duration: Duration,
						}}
					>
						{text}
					</motion.span>
				</span>
			</div>
		</div>
	);
}
addPropertyControls(TextOnScroll, {
	text: {
		type: ControlType.String,
		defaultValue: "Hello, World!",
		displayTextArea: true,
	},
	textStyle: {
		type: "font",
		title: "Font",
		controls: "extended",
		defaultValue: {
			fontSize: 16,
			lineHeight: "1.1",
		},
	},
	color01: {
		title: "Color 01",
		type: ControlType.Color,
		defaultValue: "#333",
	},
	color02: {
		title: "Color 02",
		type: ControlType.Color,
		defaultValue: "#fff",
	},
	Duration: {
		type: ControlType.Number,
		defaultValue: 1,
		min: 0.1,
		max: 10,
		step: 0.1,
	},
	delay: {
		title: "Delay",
		type: ControlType.Number,
		defaultValue: 0,
		min: 0,
		max: 10,
		step: 0.1,
	},
	replays: {
		title: "Replays",
		type: ControlType.Boolean,
		defaultValue: true,
	},
	scrollTriggerOffset: {
		title: "Scroll Trigger Offset",
		type: ControlType.Number,
		defaultValue: 0.5,
		min: 0,
		max: 1,
		step: 0.1,
	},
});

// virtual:text-on-scroll
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"6d1ac80c6e7bce05cf1e83998b9524564a80e103f40bc586c8c0153e682ec4cd"
			}
			locale={locale}
			locales={locales}
		>
			<TextOnScroll {...rest} />
		</ContextProviders>
	);
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders TextOnScrollFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"6d1ac80c6e7bce05cf1e83998b9524564a80e103f40bc586c8c0153e682ec4cd"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={TextOnScroll}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, TextOnScroll);
var text_on_scroll_default = ComponentWithRoot;
export { text_on_scroll_default as default };
