// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project 6d1ac80c6e7bce05 "Projeto Chacal", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
 * variant?: 'Default' | 'Tablet' | 'Mobile' // Variant
 * textContent?: string // Text Content
 * color?: string // Color
 * duration?: number // Duration
 * loop?: boolean // Loop
 * delayBetweenLoops?: number // Delay Between Loops
 * repeatTime?: number // Repeat Time
 * transitionDirection?: 'Top to Bottom' | 'Bottom to Top' // Transition Direction
 * delay?: number // Delay
}} Props

 */
import { Text_Chr_Reveal } from "./chunks/chunk-LTE4JTDU.js";
import { routes } from "./chunks/chunk-XLH7UDAO.js";

// virtual:text-animation
import { Fragment as Fragment2 } from "react";
import { ContextProviders } from "unframer";

// /:https://framerusercontent.com/modules/qAdSKGSvukKnBAKcbBTs/clK9r5Q6ZigaCs55jHcR/zaOABp1lu.js
import { jsx as _jsx } from "react/jsx-runtime";
import {
	addFonts,
	addPropertyControls,
	ComponentViewportProvider,
	ControlType,
	cx,
	getFonts,
	getPropertyControls,
	useComponentViewport,
	useLocaleInfo,
	useVariantState,
	withCSS,
} from "unframer";
import { LayoutGroup, motion, MotionConfigContext } from "unframer";
import * as React from "react";
var Text_Chr_RevealFonts = getFonts(Text_Chr_Reveal);
var Text_Chr_RevealControls = getPropertyControls(Text_Chr_Reveal);
var cycleOrder = ["oEhsEpy90", "QYtiIkH08", "dQ32JA_1O"];
var serializationHash = "framer-NRAxL";
var variantClassNames = {
	dQ32JA_1O: "framer-v-1uwez6n",
	oEhsEpy90: "framer-v-8sbata",
	QYtiIkH08: "framer-v-bs3r6w",
};
function addPropertyOverrides(overrides, ...variants) {
	const nextOverrides = {};
	variants?.forEach(
		(variant) => variant && Object.assign(nextOverrides, overrides[variant]),
	);
	return nextOverrides;
}
var transition1 = {
	bounce: 0.2,
	delay: 0,
	duration: 0.4,
	type: "spring",
};
var Transition = ({ value, children }) => {
	const config = React.useContext(MotionConfigContext);
	const transition = value ?? config.transition;
	const contextValue = React.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext.Provider value={contextValue}>
			{children}
		</MotionConfigContext.Provider>
	);
};
var Variants = motion.create(React.Fragment);
var humanReadableEnumMap = {
	"Bottom to Top": "bottom-to-top",
	"Top to Bottom": "top-to-bottom",
};
var humanReadableVariantMap = {
	Default: "oEhsEpy90",
	Mobile: "dQ32JA_1O",
	Tablet: "QYtiIkH08",
};
var getProps = ({
	color,
	delay,
	delayBetweenLoops,
	duration,
	height,
	id,
	loop,
	repeatTime,
	textContent,
	transitionDirection,
	width,
	...props
}) => {
	return {
		...props,
		aKy_s2kMW: textContent ?? props.aKy_s2kMW ?? "BLENDING ",
		bbxo_KhgS: delayBetweenLoops ?? props.bbxo_KhgS,
		DsmfhvFyu: duration ?? props.DsmfhvFyu ?? 2,
		eRLhwGVZm: repeatTime ?? props.eRLhwGVZm,
		MENZJ5HpV:
			humanReadableEnumMap[transitionDirection] ??
			transitionDirection ??
			props.MENZJ5HpV ??
			"bottom-to-top",
		NTAKb2KbT:
			color ??
			props.NTAKb2KbT ??
			"var(--token-7ab5faa8-d17b-41d2-8b42-49368cf2f4df, rgb(34, 39, 37))",
		SjC2vorBt: loop ?? props.SjC2vorBt,
		VAhEF97jC: delay ?? props.VAhEF97jC,
		variant:
			humanReadableVariantMap[props.variant] ?? props.variant ?? "oEhsEpy90",
	};
};
var createLayoutDependency = (props, variants) => {
	if (props.layoutDependency)
		return variants.join("-") + props.layoutDependency;
	return variants.join("-");
};
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
	const { activeLocale, setLocale } = useLocaleInfo();
	const {
		style,
		className,
		layoutId,
		variant,
		aKy_s2kMW,
		NTAKb2KbT,
		DsmfhvFyu,
		SjC2vorBt,
		bbxo_KhgS,
		eRLhwGVZm,
		MENZJ5HpV,
		VAhEF97jC,
		...restProps
	} = getProps(props);
	const {
		baseVariant,
		classNames,
		clearLoadingGesture,
		gestureHandlers,
		gestureVariant,
		isLoading,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState({
		cycleOrder,
		defaultVariant: "oEhsEpy90",
		variant,
		variantClassNames,
	});
	const layoutDependency = createLayoutDependency(props, variants);
	const sharedStyleClassNames = [];
	const scopingClassNames = cx(serializationHash, ...sharedStyleClassNames);
	const ref1 = React.useRef(null);
	const defaultLayoutId = React.useId();
	const componentViewport = useComponentViewport();
	return (
		<LayoutGroup id={layoutId ?? defaultLayoutId}>
			<Variants animate={variants} initial={false}>
				<Transition value={transition1}>
					<motion.div
						{...restProps}
						{...gestureHandlers}
						className={cx(
							scopingClassNames,
							"framer-8sbata",
							className,
							classNames,
						)}
						data-framer-name={"Default"}
						layoutDependency={layoutDependency}
						layoutId={"oEhsEpy90"}
						ref={ref ?? ref1}
						style={{
							...style,
						}}
						{...addPropertyOverrides(
							{
								dQ32JA_1O: {
									"data-framer-name": "Mobile",
								},
								QYtiIkH08: {
									"data-framer-name": "Tablet",
								},
							},
							baseVariant,
							gestureVariant,
						)}
					>
						<ComponentViewportProvider>
							<motion.div
								className={"framer-f7c20-container"}
								layoutDependency={layoutDependency}
								layoutId={"tvbGnsX42-container"}
							>
								<Text_Chr_Reveal
									color={NTAKb2KbT}
									delay={VAhEF97jC}
									direction={MENZJ5HpV}
									duration={DsmfhvFyu}
									height={"100%"}
									id={"tvbGnsX42"}
									isLooping={SjC2vorBt}
									layoutId={"tvbGnsX42"}
									loopDelay={bbxo_KhgS}
									repeat={eRLhwGVZm}
									text={aKy_s2kMW}
									textStyle={{
										fontFamily: '"Manrope", "Manrope Placeholder", sans-serif',
										fontSize: "148px",
										fontStyle: "normal",
										fontWeight: 600,
										letterSpacing: "-0.04em",
										lineHeight: "0.8em",
										textAlign: "center",
									}}
									width={"100%"}
									yOffset1={-170}
									yOffset2={-300}
									yOffset3={-239}
									{...addPropertyOverrides(
										{
											dQ32JA_1O: {
												textStyle: {
													fontFamily:
														'"Manrope", "Manrope Placeholder", sans-serif',
													fontSize: "60px",
													fontStyle: "normal",
													fontWeight: 600,
													letterSpacing: "-0.04em",
													lineHeight: "0.8em",
													textAlign: "center",
												},
												yOffset1: -105,
												yOffset2: -115,
												yOffset3: -97,
											},
											QYtiIkH08: {
												textStyle: {
													fontFamily:
														'"Manrope", "Manrope Placeholder", sans-serif',
													fontSize: "99px",
													fontStyle: "normal",
													fontWeight: 600,
													letterSpacing: "-0.04em",
													lineHeight: "0.8em",
													textAlign: "center",
												},
												yOffset2: -190,
												yOffset3: -160,
											},
										},
										baseVariant,
										gestureVariant,
									)}
								/>
							</motion.div>
						</ComponentViewportProvider>
					</motion.div>
				</Transition>
			</Variants>
		</LayoutGroup>
	);
});
var css = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-NRAxL.framer-1e828ua, .framer-NRAxL .framer-1e828ua { display: block; }",
	".framer-NRAxL.framer-8sbata { align-content: flex-start; align-items: flex-start; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 10px; height: 121px; justify-content: center; overflow: hidden; padding: 0px; position: relative; width: min-content; }",
	".framer-NRAxL .framer-f7c20-container { flex: none; height: auto; position: relative; width: auto; }",
	"@supports (background: -webkit-named-image(i)) and (not (font-palette:dark)) { .framer-NRAxL.framer-8sbata { gap: 0px; } .framer-NRAxL.framer-8sbata > * { margin: 0px; margin-left: calc(10px / 2); margin-right: calc(10px / 2); } .framer-NRAxL.framer-8sbata > :first-child { margin-left: 0px; } .framer-NRAxL.framer-8sbata > :last-child { margin-right: 0px; } }",
	".framer-NRAxL.framer-v-bs3r6w.framer-8sbata { height: 81px; }",
	".framer-NRAxL.framer-v-1uwez6n.framer-8sbata { gap: 0px; height: 49px; }",
	"@supports (background: -webkit-named-image(i)) and (not (font-palette:dark)) { .framer-NRAxL.framer-v-1uwez6n.framer-8sbata { gap: 0px; } .framer-NRAxL.framer-v-1uwez6n.framer-8sbata > * { margin: 0px; margin-left: calc(0px / 2); margin-right: calc(0px / 2); } .framer-NRAxL.framer-v-1uwez6n.framer-8sbata > :first-child { margin-left: 0px; } .framer-NRAxL.framer-v-1uwez6n.framer-8sbata > :last-child { margin-right: 0px; } }",
];
var FramerzaOABp1lu = withCSS(Component, css, "framer-NRAxL");
var stdin_default = FramerzaOABp1lu;
FramerzaOABp1lu.displayName = "Text Animation";
FramerzaOABp1lu.defaultProps = {
	height: 121,
	width: 667,
};
addPropertyControls(FramerzaOABp1lu, {
	variant: {
		options: ["oEhsEpy90", "QYtiIkH08", "dQ32JA_1O"],
		optionTitles: ["Default", "Tablet", "Mobile"],
		title: "Variant",
		type: ControlType.Enum,
	},
	aKy_s2kMW: {
		defaultValue: "BLENDING ",
		displayTextArea: true,
		title: "Text Content",
		type: ControlType.String,
	},
	NTAKb2KbT: {
		defaultValue:
			'var(--token-7ab5faa8-d17b-41d2-8b42-49368cf2f4df, rgb(34, 39, 37)) /* {"name":"Gray"} */',
		title: "Color",
		type: ControlType.Color,
	},
	DsmfhvFyu: {
		defaultValue: 2,
		title: "Duration",
		type: ControlType.Number,
	},
	SjC2vorBt: {
		defaultValue: false,
		title: "Loop",
		type: ControlType.Boolean,
	},
	bbxo_KhgS: {
		defaultValue: 0,
		title: "Delay Between Loops",
		type: ControlType.Number,
	},
	eRLhwGVZm: {
		defaultValue: 0,
		title: "Repeat Time",
		type: ControlType.Number,
	},
	MENZJ5HpV: Text_Chr_RevealControls?.["direction"] && {
		...Text_Chr_RevealControls["direction"],
		defaultValue: "bottom-to-top",
		description: void 0,
		hidden: void 0,
		title: "Transition Direction",
	},
	VAhEF97jC: {
		defaultValue: 0,
		title: "Delay",
		type: ControlType.Number,
	},
});
addFonts(
	FramerzaOABp1lu,
	[
		{
			explicitInter: true,
			fonts: [
				{
					family: "Manrope",
					source: "fontshare",
					style: "normal",
					url: "https://framerusercontent.com/third-party-assets/fontshare/wf/6U2SGH566NSNERG6RGEV3DSNEK7DL2RF/JRDYRKMSAW2H35IWEQIPL67HAJQ35MG5/JNU3GNMUBPWW6V6JTED3S27XL5HN7NM5.woff2",
					weight: "600",
				},
			],
		},
		...Text_Chr_RevealFonts,
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// virtual:text-animation
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {
	base: "dQ32JA_1O",
	md: "QYtiIkH08",
	xl: "oEhsEpy90",
};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"6d1ac80c6e7bce05cf1e83998b9524564a80e103f40bc586c8c0153e682ec4cd"
			}
			locale={locale}
			locales={locales}
		>
			{jsx(stdin_default, {
				...rest,
			})}
		</ContextProviders>
	);
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders TextAnimationFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"6d1ac80c6e7bce05cf1e83998b9524564a80e103f40bc586c8c0153e682ec4cd"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={stdin_default}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, stdin_default);
var text_animation_default = ComponentWithRoot;
export { text_animation_default as default };
